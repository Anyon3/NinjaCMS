source ninja 
{
	type = mysql
	sql_host = localhost
	sql_user = ********
	sql_pass = *********
	sql_db = *********
}

##########################################			 													 ##########################################
##########################################   Main index - All topics with first post / last post & co	 ##########################################
##########################################																 
source main : ninja
{
	sql_field_string = subject
	sql_query_pre = SET NAMES utf8
	sql_query_pre = REPLACE INTO sph_counter SELECT 1, MAX(id), NOW() FROM topics
	sql_query = \
SELECT t.id, t.id to_id, t.subject, t.first_poster_id to_first_poster_id, t.first_post_id to_first_post_id, t.first_post_ts, t.first_post_ts to_first_post_ts, \
t.last_poster_id to_last_poster_id, t.last_post_id, t.last_post_id to_last_post_id, t.last_post_ts to_last_post_ts, t.section to_section, \
t.num_replies to_num_replies, t.pts to_pts, t.closed to_closed, t.sticky to_sticky, t.moderate to_moderate, t.tag to_tag, t.updated_ts to_updated_ts, \
p.id po_id, p.pts po_pts, p.edited po_edited, p.edited_by po_edited_by, p.message po_message, p.topic_id, p.posted, \
p2.id, p2.id pl_id, p2.pts pl_pts, p2.edited pl_edited, p2.edited_by pl_edited_by, p2.message pl_message \
FROM topics t \
JOIN posts p ON p.topic_id = t.id \
JOIN posts p2 ON p2.id = t.last_post_id \
AND p.posted = t.first_post_ts \
WHERE t.id<=(SELECT max_doc_id FROM sph_counter WHERE counter_id=1)

# field_string  = can make fulltext search on this attribute
# attr_string   = simple indexing of content, can't make fulltext search

sql_attr_uint		= to_id					# id topic
sql_attr_uint 		= to_first_poster_id			# first poster id
sql_attr_uint		= to_first_post_id			# first post id
sql_attr_uint		= to_first_post_ts			# Timestamp of the first post
sql_attr_uint 		= to_last_poster_id			# last poster id
sql_attr_uint		= to_last_post_id			# last post id
sql_attr_uint		= to_last_post_ts			# Timestamp of the last post
sql_attr_uint		= to_section				# Section
sql_attr_uint		= to_num_replies			# Number of replies
sql_attr_uint		= to_pts				# Total point
sql_attr_uint		= to_closed				# Closed or not
sql_attr_uint		= to_sticky				# Sticky or not
sql_attr_uint		= to_moderate				# Is the topic moderate ?
sql_attr_string		= to_tag				# tag topic
sql_attr_string		= to_updated_ts				# Timestamp last change
sql_attr_uint		= po_id					# Post id (first)
sql_attr_uint		= po_pts				# pts (first)
sql_attr_string		= po_edited 				# Timestamp of the last edit (if not then null)
sql_attr_string		= po_edited_by				# id username of the edit	
sql_attr_string 	= po_message				# First post (content)
sql_attr_uint		= pl_id					# Post id (last)
sql_attr_uint		= pl_pts				# pts (last)
sql_attr_string		= pl_edited 				# Timestamp of the last edit (if not then null)
sql_attr_string		= pl_edited_by				# id username of the edit	
sql_attr_string 	= pl_message				# Last post (content)
}

source mdelta : main
{
	sql_field_string = subject
	sql_query_pre = SET NAMES utf8
        sql_query_pre = SELECT @last_reindex := last_reindex FROM sph_counter WHERE counter_id=1

	  sql_query_killlist = \
          SELECT id FROM topics WHERE updated_ts>=@last_reindex UNION \
          SELECT id FROM sph_delete WHERE deleted_ts>=@last_reindex

  	sql_query = \
SELECT t.id, t.id to_id, t.subject, t.first_poster_id to_first_poster_id, t.first_post_id to_first_post_id, t.first_post_ts, t.first_post_ts to_first_post_ts, \
t.last_poster_id to_last_poster_id, t.last_post_id, t.last_post_id to_last_post_id, t.last_post_ts to_last_post_ts, t.section to_section, \
t.num_replies to_num_replies, t.pts to_pts, t.closed to_closed, t.sticky to_sticky, t.moderate to_moderate, t.tag to_tag, t.updated_ts to_updated_ts, \
p.id po_id, p.pts po_pts, p.edited po_edited, p.edited_by po_edited_by, p.message po_message, p.topic_id, p.posted, \
p2.id, p2.id pl_id, p2.pts pl_pts, p2.edited pl_edited, p2.edited_by pl_edited_by, p2.message pl_message \
FROM topics t \
JOIN posts p ON p.topic_id = t.id \
JOIN posts p2 ON p2.id = t.last_post_id \
AND p.posted = t.first_post_ts \
WHERE t.id>( SELECT max_doc_id FROM sph_counter WHERE counter_id=1 )OR \
      updated_ts>=@last_reindex 
}

index main
{
    source = main
    #kbatch = main
    path = /usr/local/var/data/main
    morphology=libstemmer_french, stem_en
    html_strip = 1
}

index mdelta : main
{
    source = mdelta
    path = /usr/local/var/data/mdelta
}
####################################################				 ##########################################
#################################################### END main mdelta ##########################################
####################################################				 ##########################################

##########################################			 								   ##########################################
##########################################           User & related information		   ##########################################
##########################################											   ##########################################
source user : ninja
{

	sql_field_string = username
	sql_query_pre = SET NAMES utf8
    	sql_query_pre = REPLACE INTO sph_counter SELECT 2, MAX(id), NOW() FROM users
    	sql_query = \
SELECT u.id, u.id us_id, u.username, u.password us_password, u.email us_email, u.num_posts us_num_posts, u.pts us_pts, u.badges us_badges, show_badge us_show_badge, \
u.last_post us_last_post, u.avatar us_avatar, u.avertissement us_avertissement, u.registered us_registered, u.vote_left us_vote_left, \
u.jabber us_jabber, u.jabber_visible us_jabber_visible, u.icq us_icq, u.icq_visible us_icq_visible, CRC32(LOWER(u.token)) us_token, u.scheme us_scheme, u.reason us_reason, u.pant us_pant \
FROM users u \
WHERE u.id<=(SELECT max_doc_id FROM sph_counter WHERE counter_id=2)

sql_attr_uint 	 = us_id				# id user
sql_attr_string	 = us_password				# Hash
sql_attr_uint    = us_num_posts				# Number of posts
sql_attr_uint	 = us_pts				# Point(s)
sql_attr_uint	 = us_vote_left				# Number of maximum vote, per day
sql_attr_string  = us_badges				# Badges
sql_attr_uint	 = us_show_badge			# ID of badge to display
sql_attr_uint  	 = us_last_post 			# Last post posted (timestamp)
sql_attr_string	 = us_avatar				# path avatar
sql_attr_uint 	 = us_avertissement			# Warning users (3 = ban, default 0)
sql_attr_string	 = us_email				# Email (or not)
sql_attr_bool	 = us_jabber_visible			# Display jabber to public
sql_attr_bool	 = us_icq_visible			# Display ICQ to public
sql_attr_string	 = us_jabber				# Jabber address
sql_attr_string	 = us_icq				# Icq address
sql_attr_uint  = us_token				# Token (need avoid SQL counter attack)
sql_attr_uint    = us_registered 			# Registration date (timestamp)
sql_attr_string	 = us_scheme				# default scheme 
sql_attr_string	 = us_reason				# If not null, then the user is ban
sql_attr_uint	 = us_pant				# Topic pantheon of the user (if not, then null)
}

source udelta : user
{
	sql_field_string = username
	sql_query_pre = SET NAMES utf8
    	sql_query_pre = SELECT @last_reindex := last_reindex FROM sph_counter WHERE counter_id=2

	 sql_query_killlist = \
	 SELECT id FROM users WHERE user_ts>=@last_reindex
  	sql_query = \
SELECT u.id, u.id us_id, u.username, u.password us_password, u.email us_email, u.num_posts us_num_posts, u.pts us_pts, u.badges us_badges, show_badge us_show_badge, \
u.last_post us_last_post, u.avatar us_avatar, u.avertissement us_avertissement, u.registered us_registered, u.vote_left us_vote_left, \
u.jabber us_jabber, u.jabber_visible us_jabber_visible, u.icq us_icq, u.icq_visible us_icq_visible, CRC32(LOWER(u.token)) us_token, u.scheme us_scheme, u.reason us_reason, u.pant us_pant \
FROM users u \
WHERE u.id>( SELECT max_doc_id FROM sph_counter WHERE counter_id=2 ) OR user_ts>=@last_reindex
}

index user
{
    source = user
#kbatch = main	
    path = /usr/local/var/data/user
}

index udelta : user
{
    source = udelta
    path = /usr/local/var/data/udelta
}
####################################################				 ##########################################
####################################################    END user		 ##########################################
####################################################				 ##########################################
indexer
{
	mem_limit = 1024M
}

searchd 
{
	listen = 9312
	#log = /var/log/spidx.log
	#query_log = /var/log/pql.log
	read_timeout = 5
	max_children = 25
	pid_file = /var/run/searchd.pid
	seamless_rotate = 1
	preopen_indexes = 1
	unlink_old = 1
}
